// backend/src/controllers/auth.controller.js
const User = require("../model/auth.model");
const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");


// üìç –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è (signup)
exports.signup = async (req, res) => {
    try {
        const { name, email, password, phoneNum } = req.body;

        // –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: "User already exists" });
        }

        // –•—ç—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
        const salt = await bcrypt.genSalt(10);
        const hashedPassword = await bcrypt.hash(password, salt);

        const newUser = await User.create({
            name,
            email,
            password: hashedPassword,
            phoneNum,
        });

        res.status(201).json({
            message: "User registered successfully",
            userId: newUser._id,
            email: newUser.email,
        });
    } catch (error) {
        res.status(500).json({ message: "Server error", error: error.message });
    }
};


// üìç –í—Ö–æ–¥ (signin)
exports.signin = async (req, res) => {
    try {
        const { email, password } = req.body;

        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: "Invalid credentials" });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: "Invalid credentials" });
        }

        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è JWT
        const token = jwt.sign(
            { id: user._id, email: user.email },
            process.env.JWT_SECRET,
            { expiresIn: "1h" }
        );

        res.status(200).json({
            message: "Login successful",
            token,
            user: {
                id: user._id,
                name: user.name,
                email: user.email,
            }
        });
    } catch (error) {
        res.status(500).json({ message: "Server error", error: error.message });
    }
};


// üìç –í—ã—Ö–æ–¥ (logout)
exports.logout = async (req, res) => {
    try {
        // –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–∫–µ–Ω—ã –±–µ–∑ –±–∞–∑—ã ‚Äî –ø—Ä–æ—Å—Ç–æ –≥–æ–≤–æ—Ä–∏–º –∫–ª–∏–µ–Ω—Ç—É —É–¥–∞–ª–∏—Ç—å —Ç–æ–∫–µ–Ω
        res.status(200).json({ message: "Logout successful, please remove token on client side" });
    } catch (error) {
        res.status(500).json({ message: "Server error", error: error.message });
    }
};
